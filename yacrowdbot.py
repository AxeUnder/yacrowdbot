from datetime import datetime, timedelta

import requests

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Application, CommandHandler, MessageHandler, filters, ContextTypes,
                          ConversationHandler, CallbackQueryHandler)
from telegram.error import TelegramError
import pytz

from api import *


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logging.getLogger().setLevel(logging.INFO)

# A dictionary to keep track of the last post sent to each user
last_sent_posts = {}

# Define states for ConversationHandler
SET_TIME, SET_TIME_ZONE = range(2)


async def say_hi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    chat = update.effective_chat
    await context.bot.send_message(chat_id=chat.id, text='–ü—Ä–∏–≤–µ—Ç, —è CrowdBot!')


async def change_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–º–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    chat = update.effective_chat
    response = await get_user(chat.id)

    start_time = response.get('start_time')
    end_time = response.get('end_time')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —á—á:–º–º:—Å—Å –≤ —á—á:–º–º
    if len(start_time) > 5:
        start_time = start_time[:5]
    if len(end_time) > 5:
        end_time = end_time[:5]

    keyboard = [
        [InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='keep_settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=chat.id,
        text=f'–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {start_time}-{end_time}\n'
             '–î–ª—è —Å–º–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á—á:–º–º-—á—á:–º–º',
        reply_markup=reply_markup
    )

    logging.info(f'–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {start_time}-{end_time}')

    return SET_TIME


async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    chat = update.effective_chat
    message = update.message.text
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}")
    keyboard = [
        [InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='keep_settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        start_time, end_time = message.split('-')
        start_hour, start_minute = map(int, start_time.split(':'))
        end_hour, end_minute = map(int, end_time.split(':'))

        if 0 <= start_hour < 24 and 0 <= start_minute < 60 and 0 <= end_hour < 24 and 0 <= end_minute < 60:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await update_user(chat.id, {
                'start_time': f'{start_hour:02}:{start_minute:02}',
                'end_time': f'{end_hour:02}:{end_minute:02}'
            })

            await context.bot.send_message(
                chat_id=chat.id,
                text=f'–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {start_hour:02}:{start_minute:02}-'
                     f'{end_hour:02}:{end_minute:02}'
            )
            logging.info(f"–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat.id}")
            return ConversationHandler.END
        else:
            await context.bot.send_message(
                chat_id=chat.id,
                text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç —á—á:–º–º-—á—á:–º–º.',
                reply_markup=reply_markup
            )
            return SET_TIME
    except ValueError:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏", exc_info=True)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
        await context.bot.send_message(
            chat_id=chat.id,
            text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç —á—á:–º–º-—á—á:–º–º.',
            reply_markup=reply_markup
        )
        return SET_TIME


async def change_time_zone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–º–µ–Ω—ã —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    chat = update.effective_chat
    response = await get_user(chat.id)

    time_zone = response.get('time_zone')

    keyboard = [
        [InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='keep_settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=chat.id,
        text=f'–í–∞—à —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {time_zone}\n'
             '–î–ª—è —Å–º–µ–Ω—ã —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬±—á—á:–º–º:',
        reply_markup=reply_markup
    )

    logging.info(f'–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat.id}: {time_zone}')

    return SET_TIME_ZONE


async def set_time_zone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message = update.message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {message}")
    keyboard = [
        [InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='keep_settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if not (message.startswith('+') or message.startswith('-')) or ':' not in message:
            raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞')

        hours_minutes = message[1:].split(':')
        if len(hours_minutes) != 2:
            raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞')

        hours, minutes = map(int, hours_minutes)

        if not (0 <= hours < 24 and 0 <= minutes < 60):
            raise ValueError('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–æ–≤ –∏–ª–∏ –º–∏–Ω—É—Ç')

        sign = message[0]
        formatted_time_zone = f"{sign}{hours:02}:{minutes:02}"

        logging.info(f'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –Ω–∞ {formatted_time_zone}')

        updated_user = await update_user(chat_id, {'time_zone': formatted_time_zone})

        if updated_user and updated_user.get('time_zone') == formatted_time_zone:
            await context.bot.send_message(chat_id=chat_id, text=f'–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {formatted_time_zone}!')
            logging.info(f'–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å {formatted_time_zone} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.')
            return ConversationHandler.END
        else:
            logging.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.')
            await context.bot.send_message(chat_id=chat_id, text='–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.')
            return SET_TIME_ZONE

    except ValueError as error:
        await context.bot.send_message(
            chat_id=chat_id,
            text='–£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬±—á—á:–º–º.',
            reply_markup=reply_markup
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {error}")
        return SET_TIME_ZONE


async def wake_up(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    chat = update.effective_chat
    name = update.message.chat.username
    keyboard = [
        [InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')],
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è‚åõ', callback_data='change_time')],
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Åüåê', callback_data='change_time_zone')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    try:
        user = await get_user(chat.id)
        if not user:
            await store_user(chat.id, name)
        else:
            await update_user(chat.id, {'active': True})
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π Users: {e}')

    await context.bot.send_message(
        chat_id=chat.id,
        text=f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–∫–ª—é—á–∏–ª–∏ –º–µ–Ω—è, {name}!',
        reply_markup=reply_markup
    )


def convert_time_zone(time_zone):
    sign = time_zone[0]
    hours, minutes = map(int, time_zone[1:].split(':'))
    offset = hours * 60 + minutes
    if sign == '-':
        offset = -offset
    return pytz.FixedOffset(offset)


async def send_news(context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        posts = await get_posts()
        now_utc = datetime.now(pytz.utc)

        users = await get_users()
        if not users:
            return

        for user in users:
            if user.get('active'):
                user_timezone_offset = user.get('time_zone')
                user_timezone = convert_time_zone(user_timezone_offset)

                now_local = now_utc.astimezone(user_timezone)
                start_time = datetime.strptime(user.get('start_time')[:5], '%H:%M').time()
                end_time = datetime.strptime(user.get('end_time')[:5], '%H:%M').time()

                logging.info(
                    f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['id']}: now={now_local.time()}, start_time={start_time}, end_time={end_time}")

                if start_time <= now_local.time() <= end_time:
                    for post in posts:
                        if isinstance(post, dict) and 'date_create' in post and 'title' in post and 'text' in post:
                            try:
                                post_id = post['id']
                                if user['id'] in last_sent_posts and post_id <= last_sent_posts[user['id']]:
                                    continue  # Skip this post if it has already been sent to the user

                                post_time = datetime.strptime(post['date_create'], '%Y-%m-%dT%H:%M:%S.%fZ').replace(
                                    tzinfo=pytz.utc)
                                logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞: post_time={post_time}")

                                post_time_local = post_time.astimezone(user_timezone)

                                if post_time_local >= (now_local - timedelta(minutes=10)):
                                    post_content = f"{post['title']}\n\n{post['text']}"
                                    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {post_content}")
                                    await context.bot.send_message(chat_id=user['id'], text=post_content)

                                    if post.get('image'):
                                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–¥–Ω–æ–º—É
                                        for image_url in post['image']:
                                            try:
                                                response = requests.get(image_url)
                                                response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥
                                                await context.bot.send_photo(chat_id=user['id'], photo=image_url)
                                            except requests.exceptions.RequestException as e:
                                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")

                                    if post.get('video'):
                                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –ø–æ –æ–¥–Ω–æ–º—É
                                        for video_url in post['video']:
                                            try:
                                                response = requests.get(video_url)
                                                response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥
                                                await context.bot.send_video(chat_id=user['id'], video=video_url)
                                            except requests.exceptions.RequestException as e:
                                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ {video_url}: {e}")

                                    last_sent_posts[user['id']] = post_id  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                            except Exception as e:
                                logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user["id"]}: {e}')

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}')


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    chat = update.effective_chat
    keyboard = [
        [InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')],
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è‚åõ', callback_data='change_time')],
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Åüåê', callback_data='change_time_zone')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=chat.id,
        text='–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n'
             '/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞;\n'
             '/change_time - —Å–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏;\n'
             '/change_time_zone - —Å–º–µ–Ω–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞;\n'
             '/keep_settings - –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏;\n'
             '/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.',
        reply_markup=reply_markup
    )


async def keep_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    chat = update.effective_chat
    keyboard = [
        [InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')],
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è‚åõ', callback_data='change_time')],
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Åüåê', callback_data='change_time_zone')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=chat.id,
        text='–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.',
        reply_markup=reply_markup
    )

    return ConversationHandler.END


async def stop_sending(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        raise context.error
    except TelegramError as error:
        if 'blocked by the user' in str(error):
            chat_id = update.effective_chat.id
            await update_user(chat_id, {'active': False})
            logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ú–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –≤ –ë–î.')
        else:
            logging.error(f'Telegram error: {error}')


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    try:
        query = update.callback_query
        query_data = query.data
        await query.answer()

        if query_data == 'help':
            await help_command(update, context)
            return
        elif query_data == 'change_time':
            await change_time(update, context)
            return SET_TIME
        elif query_data == 'change_time_zone':
            await change_time_zone(update, context)
            return SET_TIME_ZONE
        elif query_data == 'keep_settings':
            await keep_settings(update, context)
            return ConversationHandler.END
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫: {e}')


def main():
    application = Application.builder().token(API_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', wake_up),
            CommandHandler('help', help_command),
            CommandHandler('change_time', change_time),
            CommandHandler('change_time_zone', change_time_zone),
            CallbackQueryHandler(button_handler)
        ],
        states={
            SET_TIME: [
                CallbackQueryHandler(button_handler, pattern='^keep_settings$'),
                CommandHandler('keep_settings', keep_settings),
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_time)
            ],
            SET_TIME_ZONE: [
                CallbackQueryHandler(button_handler, pattern='^keep_settings$'),
                CommandHandler('keep_settings', keep_settings),
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_time_zone)
            ],
        },
        fallbacks=[
            CallbackQueryHandler(button_handler, pattern='^keep_settings$'),
            CommandHandler('keep_settings', keep_settings),
            MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler)
        ],
        per_message=False
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))

    application.add_handler(CommandHandler('start', wake_up))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('keep_settings', keep_settings))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex(r'\d+'), say_hi))

    application.add_error_handler(stop_sending)

    application.job_queue.run_repeating(send_news, interval=60, first=10)
    application.run_polling()


if __name__ == '__main__':
    main()
